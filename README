...............................................................................
Rtime - %%SHORTDESCRIPTION%%
        Release %%VERSION%%
...............................................................................

Rtime is an OCaml module implementing timelines for React [1].  It
manages time stamp events, delayed events and delayed signals along
timelines. The client chooses the concrete timeline by providing an
absolute notion of time. Running the timeline at the appropriate pace
is left to the client.

Rtime is made of a single module and depends on React. It is
distributed under the new BSD license.

[1] available at http://erratique.ch/software/react

Project home page : http://erratique.ch/software/rtime
Contact : daniel.buenzl i@erratique.ch


# Installation

Rtime was tested with OCaml 3.11. rtime.mli and rtime.ml contain
everything, the code, the documentation and the license. You will also
need a copy of the React module to use Rtime (see link above). You can
just copy these files to your project directory or better, if you use
ocamlbuild, issue the following commands from the root directory of
your project :

  > ln -s /path/to/rtime-%%VERSION%%/src rtime
  > echo "<rtime> : include" >> _tags
 
  > ln -s /path/to/react-x.x.x/src react
  > echo "<react> : include" >> _tags

The documentation is generated by ocamldoc from rtime.mli. You can find
a generated version in the doc/ directory of the distribution.

If you have ocamlbuild, rtime can be installed in the $INSTALLDIR
directory as follows. First build the module, for this the location of
React's installation needs to be specified via the $REACTDIR variable :

  > REACTDIR=/path/to/react/build ./build

if $REACTDIR is left unspecified, +react is used. Then the module
can be installed with :

  > INSTALLDIR=/path/to/install/dir ./build install 

if $INSTALLDIR is left unspecified, `ocamlc -where`/rtime is used.

A test program is provided in the test/ directory. It needs the Unix
module and can be built with :

  > REACTDIR=/path/to/react/build ./build test.native

The tests may fail in a heavily loaded environment or if the system's
timer are not precise enough (you can adjust the tolerance to
precision with -p).